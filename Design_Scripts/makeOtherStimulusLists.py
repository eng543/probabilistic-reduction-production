# Step 3
# Creates full set of counterbalanced stimulus lists using reference sheets generated by script2

import pandas as pd
import random
import os

# New lists includes list1_order1 so that the practice trials can be added
newLists = ["list1_order1.txt", "list1_order2.txt", "list1_order3.txt",
            "list2_order1.txt", "list2_order2.txt", "list2_order3.txt",
            "list3_order1.txt", "list3_order2.txt", "list3_order3.txt",
            "list4_order1.txt", "list4_order2.txt", "list4_order3.txt",
            "list5_order1.txt", "list5_order2.txt", "list5_order3.txt",
            "list6_order1.txt", "list6_order2.txt", "list6_order3.txt",
            "list7_order1.txt", "list7_order2.txt", "list7_order3.txt",
            "list8_order1.txt", "list8_order2.txt", "list8_order3.txt"]

# Create new directory in which to save new stimulus lists
newPath = "../stimulusLists/"
if not os.path.exists(newPath):
    os.makedirs(newPath)

for newList in newLists:
	newSave = "../stimulusLists/" + newList
	referenceNum = newList[4]
	
	# Appropriate reference for creating current list
	referenceList = "list" + referenceNum + "_reference.csv"
	list2 = pd.read_csv(referenceList)
	
	# Read in information about trials like with makeStimulusList1.py
	with open("../pairs1.txt", "U") as f:
		pairs = f.readlines()
	f.close()

	pairs = [line.rstrip("\n") for line in pairs]

	with open("../pairs2.txt", "U") as f:
		pairs2 = f.readlines()

	f.close()

	pairs2 = [line.rstrip("\n") for line in pairs2]

	with open("../fillers.txt", "U") as f:
		fillers = f.readlines()

	f.close()

	fillers = [line.rstrip("\n") for line in fillers]

	pairs = pairs + pairs2

	with open("../practiceTrials.txt", "U") as f:
		practice = f.readlines()

	practice = [line.rstrip("\n") for line in practice]

	targetTrials = {"targets_new_1A_len3": [],
					"targets_new_2A_len3": [],
					"targets_given_1A_len3": [],
					"targets_given_2A_len3": [],
					"targets_new_1B_len3": [],
					"targets_new_2B_len3": [],
					"targets_given_1B_len3": [],
					"targets_given_2B_len3": [],
					"targets_new_1A_len4": [],
					"targets_new_2A_len4": [],
					"targets_given_1A_len4": [],
					"targets_given_2A_len4": [],
					"targets_new_1B_len4": [],
					"targets_new_2B_len4": [],
					"targets_given_1B_len4": [],
					"targets_given_2B_len4": []}

	def extractFromCSV(givenCondition, trialBlock, trialLength):
		outputList = "targets_" + givenCondition + "_" + trialBlock + "_len" + trialLength
		targets = list2[list2.trialType == "target"]
		conditionSubset = targets[targets.givenness == givenCondition]
		blockSubset = conditionSubset[conditionSubset.block == trialBlock]
		lengthSubset = blockSubset[blockSubset.length == trialLength]
		subsetIndices = lengthSubset.index.values
		for index in subsetIndices:
			for pair in pairs:
				if lengthSubset["target"].ix[index] in pair.split(";")[0]:
					targetTrials[outputList].append(pair)

	targetConditions = ["given", "new"]
	targetBlocks = ["1A", "1B", "2A", "2B"]
	targetLengths = ["3", "4"]

	for cond in targetConditions:
		for block in targetBlocks:
			for length in targetLengths:
				extractFromCSV(cond, block, length)

	### Create filler trials using same procedure as for making list1
	# Trial length is variable
	# Each trial can include either 2, 3, or 4 actions
	len2 = []
	len3 = []
	len4 = []

	# Equally divide filler items to trial lengths
	random.shuffle(fillers)
	for i in range(1, 33):
		len2.append(fillers.pop())

	for i in range(1, 49):
		len3.append(fillers.pop())

	len4 = fillers[:]

	# Randomize list of candidate fillers for len2 trials, assign to blocks
	# Assign half (or 1/3 or 1/4) to event1 (filler1_len2) and half to event2 (filler2_len2)
	# Assign half (or 1/3 or 1/4) to block1, half to block2
	random.shuffle(len2)
	random.shuffle(len3)
	random.shuffle(len4)

	fillerLists = {"filler1_len2_block1": len2[0:8],
					"filler1_len2_block2": len2[8:16],
					"filler2_len2_block1": len2[16:24],
					"filler2_len2_block2": len2[24:32],
					"filler1_len3_block1": len3[0:8],
					"filler1_len3_block2": len3[8:16],
					"filler2_len3_block1": len3[16:24],
					"filler2_len3_block2": len3[24:32],
					"filler3_len3_block1": len3[32:40],
					"filler3_len3_block2": len3[40:48],
					"filler1_len4_block1": len4[0:8],
					"filler1_len4_block2": len4[8:16],
					"filler2_len4_block1": len4[16:24],
					"filler2_len4_block2": len4[24:32],
					"filler3_len4_block1": len4[32:40],
					"filler3_len4_block2": len4[40:48],
					"filler4_len4_block1": len4[48:56],
					"filler4_len4_block2": len4[56:64]}

	# Create empty lists to store finished trials
	finishedFillerTrials = {"fillerTrials_len2_block1": [],
						"fillerTrials_len2_block2": [],
						"fillerTrials_len3_block1": [],
						"fillerTrials_len3_block2": [],
						"fillerTrials_len4_block1": [],
						"fillerTrials_len4_block2": []}

	# For each of the filler trials, randomly pick an action for each event in trial (each action only used once)
	# Filler trial building function
	def buildFillerTrials(trialLength, block):
		import random
		# Four possible actions per trial
		actions = ["rotate", "fade", "expand", "shrink"]

		# For trials with less than 4 events, use placeholder
		placeholder = "nothing.jpg static"

		# For filler trials, there is no competitor, use placeholder2
		placeholder2 = ";nothing.jpg"

		item1 = "filler1_len" + str(trialLength) + "_block" + str(block)
		item1 = fillerLists[item1]

		item2 = "filler2_len" + str(trialLength) + "_block" + str(block)
		item2 = fillerLists[item2]

		if trialLength > 2:
			item3 = "filler3_len" + str(trialLength) + "_block" + str(block)
			item3 = fillerLists[item3]

		if trialLength > 3:
			item4 = "filler4_len" + str(trialLength) + "_block" + str(block)
			item4 = fillerLists[item4]

		for i in range(0, len(item1)):
			action1 = random.sample(actions, 1)
			event1 = item1[i] + " " + action1[0]
			sub_actions = [x for x in actions if x != action1[0]]
			action2 = random.sample(sub_actions, 1)
			event2 = item2[i] + " " + action2[0]

			if trialLength > 2:
				sub_actions2 = [x for x in sub_actions if x != action2[0]]
				action3 = random.sample(sub_actions2, 1)
				event3 = item3[i] + " " + action3[0]

			if trialLength > 3:
				action4 = [x for x in sub_actions2 if x != action3[0]]
				event4 = item4[i] + " " + action4[0]

			if trialLength == 2:
				output = "fillerTrials_len2" + "_block" + str(block)
				finishedFillerTrials[output].append("2;" + event1 + ";" + event2 + ";" + placeholder + ";" + placeholder + placeholder2)

			if trialLength == 3:
				output = "fillerTrials_len3" + "_block" + str(block)
				finishedFillerTrials[output].append("3;" + event1 + ";" + event2 + ";" + event3 + ";" + placeholder + placeholder2)

			if trialLength == 4:
				output = "fillerTrials_len4" + "_block" + str(block)
				finishedFillerTrials[output].append("4;" + event1 + ";" + event2 + ";" + event3 + ";" + event4 + placeholder2)

	# Loop through lists for different sets of filler trials to make
	# Three lengths
	fillerLens = [2, 3, 4]
	# Two blocks
	fillerBlocks = [1, 2]

	for lens in fillerLens:
		for blocks in fillerBlocks:
			buildFillerTrials(lens, blocks)

	# Assign 1/2 of fillers in each block to A and 1/2 in each to B
	finishedFillerTrials_blocked = {}

	def assignBlocks(fillerList):
		for lens in fillerLens:
			for blocks in fillerBlocks:
				i = "fillerTrials_len" + str(lens) + "_block" + str(blocks)
				currentList = fillerList[i]
				j = i + "A"
				finishedFillerTrials_blocked[j] = currentList[0:4]
				k = i + "B"
				finishedFillerTrials_blocked[k] = currentList[4:8]

	assignBlocks(finishedFillerTrials)

	### Create new target trials with randomly assigned actions
	# Assigned to block/condition/length according to reference sheet
	# Similar procedure as in makeExperimentList1.py
	finishedTargetTrials = {"givenTrials_len3": [],
							"newTrials_len3": [],
							"givenTrials_len4": [],
							"newTrials_len4": []}

	def buildNewTargetTrials(condition, block, trialLength):
		import random
		actions = ["rotate", "fade", "expand", "shrink"]
		placeholder = "nothing.jpg static"

		filenames = "targets_" + condition + "_" + block + "_len" + trialLength
		filenames = targetTrials[filenames]

		output = condition + "Trials_len" + trialLength

		for i in range(0, len(filenames)):
			targets = filenames[i].split(";")[0]
			nontarget1 = filenames[i].split(";")[1]
			nontarget2 = filenames[i].split(";")[2]
			nontarget3 = filenames[i].split(";")[3]
			competitor = filenames[i].split(";")[4]

			if condition == "given":
				action1 = random.sample(actions, 1)
				event1 = targets + " " + action1[0]
				sub_actions = [x for x in actions if x != action1[0]]
				action2 = random.sample(sub_actions, 1)
				event2 = nontarget1 + " " + action2[0]
				sub_actions2 = [x for x in sub_actions if x != action2[0]]
				action3 = random.sample(sub_actions2, 1)
				event3 = targets + " " + action3[0]

			elif condition == "new":
				action1 = random.sample(actions, 1)
				event1 = nontarget1 + " " + action1[0]
				sub_actions = [x for x in actions if x != action1[0]]
				action2 = random.sample(sub_actions, 1)
				event2 = nontarget2 + " " + action2[0]
				sub_actions2 = [x for x in sub_actions if x != action2[0]]
				action3 = random.sample(sub_actions2, 1)
				event3 = targets + " " + action3[0]

			if trialLength == "4":
				action4 = [x for x in sub_actions2 if x != action3[0]]
				event4 = nontarget3 + " " + action4[0]
				finishedTargetTrials[output].append("4;" + event1 + ";" + event2 + ";" + event3 + ";" + event4 + ";" + competitor)

			elif trialLength == "3":
				finishedTargetTrials[output].append("3;" + event1 + ";" + event2 + ";" + event3 + ";" + placeholder + ";" + competitor)

	for cond in targetConditions:
		for block in targetBlocks:
			for length in targetLengths:
				buildNewTargetTrials(cond, block, length)

	# Assign trials to appropriate blocks based on position in the list
	block1A = finishedTargetTrials["givenTrials_len3"][0:6] + \
				finishedTargetTrials["newTrials_len3"][0:6] + \
				finishedTargetTrials["givenTrials_len4"][0:6] + \
				finishedTargetTrials["newTrials_len4"][0:6] + \
				finishedFillerTrials_blocked["fillerTrials_len2_block1A"] + \
				finishedFillerTrials_blocked["fillerTrials_len3_block1A"] + \
				finishedFillerTrials_blocked["fillerTrials_len4_block1A"]
	
	block1B = finishedTargetTrials["givenTrials_len3"][6:12] + \
				finishedTargetTrials["newTrials_len3"][6:12] + \
				finishedTargetTrials["givenTrials_len4"][6:12] + \
				finishedTargetTrials["newTrials_len4"][6:12] + \
				finishedFillerTrials_blocked["fillerTrials_len2_block1B"] + \
				finishedFillerTrials_blocked["fillerTrials_len3_block1B"] + \
				finishedFillerTrials_blocked["fillerTrials_len4_block1B"]
	
	block2A = finishedTargetTrials["givenTrials_len3"][12:18] + \
				finishedTargetTrials["newTrials_len3"][12:18] + \
				finishedTargetTrials["givenTrials_len4"][12:18] + \
				finishedTargetTrials["newTrials_len4"][12:18] + \
				finishedFillerTrials_blocked["fillerTrials_len2_block2A"] + \
				finishedFillerTrials_blocked["fillerTrials_len3_block2A"] + \
				finishedFillerTrials_blocked["fillerTrials_len4_block2A"]
	
	block2B = finishedTargetTrials["givenTrials_len3"][18:24] + \
				 finishedTargetTrials["newTrials_len3"][18:24] + \
				 finishedTargetTrials["givenTrials_len4"][18:24] + \
				 finishedTargetTrials["newTrials_len4"][18:24] + \
				 finishedFillerTrials_blocked["fillerTrials_len2_block2B"] + \
				 finishedFillerTrials_blocked["fillerTrials_len3_block2B"] + \
				 finishedFillerTrials_blocked["fillerTrials_len4_block2B"]
	
	# Randomize within blocks (twice for good measure)
	random.shuffle(block1A)
	random.shuffle(block1A)
	random.shuffle(block1B)
	random.shuffle(block1B)
	random.shuffle(block2A)
	random.shuffle(block2A)
	random.shuffle(block2B)
	random.shuffle(block2B)
	
	# Combine blocks and practice trials
	allTrials = practice + block1A + block1B + block2A + block2B
	
	# Save to new list
	wf = open(newSave, "w")
	for trial in allTrials:
		wf.write(trial)
		wf.write("\n")
	
	wf.close()

# Delete old list1_order1 (without practice trials)
os.remove("../list1_order1.txt")